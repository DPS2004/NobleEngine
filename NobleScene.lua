--
-- NobleScene.lua
--
-- Do not edit this file. This is an abstrct class. Your scenes will extend it:
-- class("YourSceneName").extends(NobleScene)
--
-- See "noble/templates/SceneTemplate.lua" for a blank scene that you can copy and modify for your own scenes.
-- See "scenes/ExampleScene.lua" for an implimentation example.
--

NobleScene = {}
class("NobleScene").extends(Object)

-- baseColor
-- This is the background color of this scene.
--
NobleScene.baseColor = Graphics.kColorWhite

-- init()
-- Impliment this in your scene if you have code to run when your scene's object is created.
--
--	function YourSceneName:init()
--		YourSceneName.super.init(self)
--		...
--	end
--
function NobleScene:init() end

-- enter()
-- Impliment this in your scene if you want to run code as the transition from another scene
-- begins such as UI animation logic, initial cutscene triggers, etc.
--
--	function YourSceneName:enter()
--		YourSceneName.super.enter(self)
--		...
--	end
--
function NobleScene:enter() end

-- start()
-- Impliment this in your scene if you have code to run once the transition from another scene
-- is complete. This method signifies the full activation of a scene.
--
--	function YourSceneName:start()
--		YourSceneName.super.start(self)
--		...
--	end
--
function NobleScene:start()
	Noble.Input.setHandler(self.inputHandler)		-- If the new scene has a default inputHandler, it is enabled now.
end

-- update()
-- Impliment this in your scene to run scene-specfiic code on every frame.
-- NOTE: you may use coroutine.yield() inside this function, because it only runs inside of
-- playdate.update() which is a coroutine.
--
--	function YourSceneName:update()
--		YourSceneName.super.update(self)
--		...
--	end
--
function NobleScene:update() end

-- drawBackground()
-- Impliment this function to draw background visual elements in your scene. This runs every frame.
--
--	function YourSceneName:drawBackground()
--		YourSceneName.super.drawBackground(self)
--		...
--	end
--
function NobleScene:drawBackground()
	Graphics.setColor(self.baseColor)
	Graphics.fillRect(0, 0, 400, 240)
end

-- exit()
-- Impliment this in your scene if you have "goodbye" code to run when a transition to another scene
-- begins, such as UI animation, saving to disk, etc.
--
--	function YourSceneName:exit()
--		YourSceneName.super.exit(self)
--		...
--	end
--
function NobleScene:exit() end

-- finish()
-- Impliment this in your scene if you have code to run when a transition to another scene
-- is complete, such as resetting variables.
--
--	function YourSceneName:finish()
--		YourSceneName.super.finish(self)
--		...
--	end
--
function NobleScene:finish() end

-- pause() / resume()
-- Impliment one or both of these in your scene if you want something to happen when the game is paused/unpaused
-- by the system. The Playdate SDK does not require you to write pause logic, but these are useful if you want a
-- custom menu image (see Playdate SDK), want to obscure game elements to prevent players from cheating in a
-- time-sensitive game, want to count the number or times the player pauses the game, etc.
--
--	function YourSceneName:pause()
--		YourSceneName.super.pause(self)
--		...
--	end
--
function NobleScene:pause() end
function NobleScene:resume() end

-- inputHandler
-- All scenes have have a default inputHander which is made active when the scene starts.
-- You may define your scene's inputHandler, set it to a value defined elsewhere. If you do not define it,
-- input is cleared when the scene launches, and you may use Noble.Input.setHandler().
--
--	YourSceneName.inputHander = {
--
--		-- These mothods come from the Playdate SDK
--		AButtonDown = function() end,			-- Fires when button is pressed down.
--		AButtonHeld = function() end,			-- Fires after button is held for 1 second (only available for A and B).
--		AButtonUp = function() end,				-- Fires when button is released.
--		BButtonDown = function() end,
--		BButtonHeld = function() end,
--		BButtonUp = function() end,
--		downButtonDown = function() end,
--		downButtonUp = function() end,
--		leftButtonDown = function() end,
--		leftButtonUp = function() end,
--		rightButtonDown = function() end,
--		rightButtonUp = function() end,
--		upButtonDown = function() end,
--		upButtonUp = function() end,
--		cranked = function(change, acceleratedChange) end, -- See Playdate SDK.
--
--		-- These mothods are called by the Playdate SDK. They have been re-routed here.
--		crankDocked = function() end,
--		crankUndocked = function() end,
--
--		-- These methods fire every frame during which a button is held.
--		AButtonHold = function() end,
--		BButtonHold = function() end,
--		downButtonHold = function() end,
--		leftButtonHold = function() end,
--		rightButtonHold = function() end,
--		upButtonHold = function() end
--	}
-- OR
--	YourSceneName.inputHander = somePreviouslyDefinedInputHander
-- OR
--	YourSceneName.inputHander = SomeOotherSceneName.inputHandler
--
NobleScene.inputHander = {}